{"config":{"lang":["de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Einf\u00fchrung","text":"<p>OpenCodeList ist ein standardisiertes JSON-Format zum generischen Repr\u00e4sentieren von Code-Listen bzw. Schl\u00fcsselverzeichnissen. </p> <p>Die wesentlichen Eigenschaften sind:</p> <ul> <li>Definition von Code-Listen und Code-Listensammlungen mittels JSON</li> <li>Unterst\u00fctzung von Versionierung</li> <li>Unterst\u00fctzung von Mehrsprachigkeit</li> <li>Unterst\u00fctzung von mehrspaltigen Schl\u00fcsseln</li> <li>Unterst\u00fctzung von mehrspaltigen Fremdschl\u00fcsseln als Verweis auf externe Codelisten</li> <li>OpenCodeList-Dokumente k\u00f6nnen gegen das OpenCodeList Document Schema validiert werden.</li> <li>Semantisch weitestgehend kompatibel mit Code List Representation (genericode)</li> <li>Open Source</li> </ul>"},{"location":"#beispiele","title":"Beispiele","text":"<p>Die folgenden OpenCodeList-Beispiel-Dokumente stehen zur Verf\u00fcgung:</p> <ul> <li>ISO 3166-2 Codes f\u00fcr Deutschland</li> <li>Hauptst\u00e4dte der deutschen Bundesl\u00e4nder</li> </ul>"},{"location":"#aktueller-status","title":"Aktueller Status","text":"<p>OpenCodeList ist noch ganz frisch und hier in einer aller ersten Version ver\u00f6ffentlicht. \u00dcber Feedback jeglicher Art w\u00fcrden wir uns sehr freuen.</p>"},{"location":"change-log/","title":"\u00c4nderungslog","text":"<p>Wir halten uns dabei weitesgehend an die Empfehlungen aus dem Community-Projekt Keep a Changelog.</p>"},{"location":"change-log/#opencodelist-spezifikation","title":"OpenCodeList-Spezifikation","text":""},{"location":"change-log/#020-_-25-januar-2025","title":"0.2.0 _ 25. Januar 2025","text":"<ul> <li>Erste Ver\u00f6ffentlichung</li> </ul>"},{"location":"community/","title":"Community","text":"<p>OpenCodeList ist ein Open Source-Projekt. Die aktuelle Version ist ein erster Vorschlag.</p> <p>Wie freuen uns \u00fcber Feedback jeglicher Art, egal ob positiv oder negativ:</p> <ul> <li>Ein Frage oder Meldung im GitHub Issue Tracker erstellen.</li> <li>Eine Diskussion unter GitHub Discussions starten.</li> <li>Einen Pull-Request initiieren.</li> </ul>"},{"location":"libraries/","title":"Bibliotheken","text":"<p>Die folgenden Bibliotheken sind verf\u00fcgbar, um OpenCodeList-Dokumente zu parsen oder zu erzeugen:</p>"},{"location":"libraries/#net","title":".NET","text":"<ul> <li>openpotato/opencodelist.net: Offizielle OpenCodeList .NET-Bibliothek.</li> </ul>"},{"location":"libraries/#delphi","title":"Delphi","text":"<ul> <li>openpotato/opencodelist.delphi: Offizielle OpenCodeList Delphi-Bibliothek.</li> </ul>"},{"location":"specification/","title":"OpenCodeList-Spezifikation","text":""},{"location":"specification/#version-020","title":"Version 0.2.0","text":"<p>Die Schl\u00fcsselw\u00f6rter \"MUSS/M\u00dcSSEN/DARF/D\u00dcRFEN\" (Englisch: \"MUST\"), \"MUSS/M\u00dcSSEN/DARF/D\u00dcRFEN NICHT\" (Englisch: \"MUST NOT\"), \"SOLLTE/SOLLTEN\" (Englisch: \"SHOULD\"), \"SOLLTE/SOLLTEN NICHT\" (Englisch: \"SHOULD NOT\"), \"KANN/K\u00d6NNEN\" (Englisch: \"MAY\") und \"ERFORDERLICH\" (Englisch: \"REQUIRED\") in diesem Dokument sind so zu interpretieren, wie sie in ihrer englischen \u00dcbersetzung in RFC2119 und RFC8174 spezifiziert sind, und nur dann, wenn sie, wie hier, in Gro\u00dfbuchstaben geschrieben sind.</p> <p>Dieses Spezifikation ist lizenziert unter der Apache License, Version 2.0.</p>"},{"location":"specification/#einfuhrung","title":"Einf\u00fchrung","text":"<p>OpenCodeList definiert ein generisches Standard-Datenformat zur Repr\u00e4sentation von Code-Listen bzw. Schl\u00fcsselverzeichnissen. Basierend auf dem JSON-Standard kann dieses Format mit nahezu jeder Programmiersprache leicht erzeugt und gelesen werden. Mit Hilfe des OpenCodeList Document Schema k\u00f6nnen Dokumente im OpenCodeList-Format auf ihre syntaktische Korrektheit hin validiert werden.</p> <p>OpenCodeList kann zum Austausch von Code-Listen zwischen Diensten oder Anwendungen genutzt werden, als Repr\u00e4sentationsformat f\u00fcr ofizielle Code-Listen oder als Antwortformat f\u00fcr API-Anfragen (z.B. f\u00fcr RESTful Web-Services).</p>"},{"location":"specification/#was-sind-code-listen","title":"Was sind Code-Listen?","text":"<p>Code-Listen bzw. Schl\u00fcsselverzeichnisse sind strukturierte Sammlungen von Codes bzw. Schl\u00fcsseln, die zur Identifikation und Klassifikation von Daten verwendet werden. Diese Verzeichnisse sind essenziell in zahlreichen Bereichen wie Datenbanken, Verwaltungssystemen, wissenschaftlichen Forschungen und industriellen Anwendungen. Sie dienen dazu, Daten konsistent und effizient zu organisieren, zu speichern und abzurufen.</p> <p>Code-Listen spielen eine zentrale Rolle bei der Standardisierung und Harmonisierung von Daten. Durch die Verwendung standardisierter Codes k\u00f6nnen unterschiedliche Systeme und Organisationen Daten einheitlich interpretieren und austauschen. </p> <p>Beispiele f\u00fcr Code-Listen sind:</p> <ul> <li> <p>Internationale Codes f\u00fcr Staaten, Sprachen und W\u00e4hrungen der International Organization for Standardization (ISO).</p> </li> <li> <p>Nationale Gebietsschl\u00fcssel (z.B. Gemeindeschl\u00fcssel der Bundesrepublik Deutschland)</p> </li> <li> <p>Nationale und subnationale Schl\u00fcssel im \u00f6ffentlichen Bereich (z.B. Statistikschl\u00fcssel der Statistikbeh\u00f6rden)</p> </li> </ul> <p>Im Prinzip l\u00e4sst sich jede Datenauswahl auf eine Code-Liste abbilden, selbst ein banaler boolescher Wert kann durch die Codes Nein und Ja repr\u00e4sentiert werden. </p>"},{"location":"specification/#wie-sind-code-listen-aufgebaut","title":"Wie sind Code-Listen aufgebaut?","text":"<p>Es gibt kein Naturgesetz, das die Struktur von Code-Listen vorschreibt. In den meisten F\u00e4llen kann man sich aber sehr schnell auf eine tabellarische Darstellung einigen. </p> <p>Die einfachste Form einer solchen tabellarischen Code-Liste besteht aus zwei Spalten: Schl\u00fcssel und Name.</p> <p>Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis:</p> Schl\u00fcssel Name AT \u00d6sterreich CH Schweiz DE Deutschland <p>Code-Listen k\u00f6nnen potentiell beliebig viele Spalten enthalten. Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis mit drei Spalten:</p> Schl\u00fcssel Kurzname Langname AT \u00d6sterreich Republik \u00d6sterreich CH Schweiz Schweizerische Eidgenossenschaft DE Deutschland Bundesrepublik Deutschland <p>Code-Listen k\u00f6nnen aufeinander verweisen. Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis mit Verweis auf ein separates Kontinente-Verzeichnis:</p> Schl\u00fcssel Kurzname Langname Kontinent DE Deutschland Bundesrepublik Deutschland EU MA Marokko K\u00f6nigreich Marokko AF AU Australien Commonwealth of Australia OC <p>Das passende Kontinente-Verzeichnis k\u00f6nnte dann so aussehen:</p> Schl\u00fcssel Name AF Afrika AM Amerikas AS Asien EU Europa OC Ozeanien <p>Auch k\u00f6nnen Code-Listen mehr als einen Schl\u00fcssel besitzen. Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis mit verschiedenen ISO3166-Codes:</p> Alpha2Code Alpha3Code NumericCode Name AT AUT 040 \u00d6sterreich CH CHE 756 Schweiz DE DEU 276 Deutschland <p>Gehen wir noch einen Schritt weiter mit diesem mehrsprachigen L\u00e4nderverzeichnis. Hier ist es die Kombination aus Schl\u00fcssel und Sprache (ebenfalls durch einen Sprachschl\u00fcssel repr\u00e4sentiert), welche Eindeutigkeit ergibt: </p> Schl\u00fcssel Sprache Name AT de \u00d6sterreich AT en Austria CH de Schweiz CH en Switzerland DE de Deutschland DE en Germany <p>Neben Text und Zahlen k\u00f6nnen Code-Listen auch komplexe Spaltentypen definieren, die beispielsweise mit XML, JSON oder HTML gef\u00fcllt sind.</p>"},{"location":"specification/#was-macht-code-listen-so-komplex","title":"Was macht Code-Listen so komplex?","text":""},{"location":"specification/#format-und-semantik","title":"Format und Semantik","text":"<p>Wenn man an Code-Listen denkt, dann erscheint vor dem eigenen geistigen Auge schnell eine Excel-Tabelle mit ein paar Spalten und Zeilen. Aber was bedeuten die Spalten eigentlich? Steht der Code immer in der ersten Spalte? Ist der Inhalt einer Spalte immer als reiner Text zu interpretieren? Und wieso eigentlich Excel? Das ist immerhin ein ziemlich komplexes Datenformat, was nicht gerade gut geeignet ist f\u00fcr eine automatisierte Verarbeitung von Code-Listen. CSV w\u00e4re definitiv einfacher zu handhaben, beantwortet die ersten drei Fragen aber leider auch nicht.</p>"},{"location":"specification/#versionierung","title":"Versionierung","text":"<p>Code-Listen k\u00f6nnen sich im Laufe der Zeit \u00e4ndern. In diesen F\u00e4llen gibt es sowohl eine aktuelle Version einer Code-Liste als auch \u00e4ltere Versionen einer Code-Liste. Im Zuge dieser \u00c4nderungen k\u00f6nnen sich die Anzahl der Codes wie auch die Bedeutung einzelner Codes \u00e4ndern.</p>"},{"location":"specification/#abhangigkeiten","title":"Abh\u00e4ngigkeiten","text":"<p>Code-Listen k\u00f6nnen Abh\u00e4ngigkeiten untereinander haben, d.h. Werte aus einer Code-Liste k\u00f6nnen auf Codes in einer anderen Code-Liste verweisen. Diese Verweise m\u00fcssen auch eine m\u00f6gliche Versionierung der jeweils anderen Code-Liste ber\u00fccksichtigen.</p>"},{"location":"specification/#mehrsprachigkeit","title":"Mehrsprachigkeit","text":"<p>Wenn Code-Listen \u00fcber Sprachgrenzen hinweg verwendet werden, m\u00fcssen sie oft f\u00fcr mehrere Sprachen angepasst werden. Ein und derselbe Code hat dann beispielsweise in verschiedenen Sprachen unterschiedliche Bezeichnungen.</p>"},{"location":"specification/#benutzerdefinierte-code-listen","title":"Benutzerdefinierte Code-Listen","text":"<p>Wenn wir von Code-Listen sprechen, geht es nicht immer nur um standardisierte Codes, die von einem Gremium, einer Organisation oder Institution festgelegt werden, sondern oft auch um Codes, die eine kleine Benutzergruppe f\u00fcr einen bestimmten Bereich oder sogar eine bestimmte Anwendung verwenden m\u00f6chte. Diese m\u00fcssen konfliktfrei mit etablierten Standard-Codes koexistieren k\u00f6nnen.</p>"},{"location":"specification/#gibt-es-nicht-schon-standards-fur-code-listen","title":"Gibt es nicht schon Standards f\u00fcr Code-Listen?","text":"<p>Ja, gibt es: Die Organization for the Advancement of Structured Information Standards (OASIS) hat mit Code List Representation (genericode) einen XML-basierten Standard f\u00fcr Code-Listen definiert.</p> <p>The OASIS Code List Representation format, \u201cgenericode\u201d, is a single model and XML format (with a W3C XML Schema) that can encode a broad range of code list information. The XML format is designed to support interchange or distribution of machine-readable code list information between systems.  Note that genericode is not designed as a run-time format for accessing code list information, and is not optimized for such usage.  Rather, it is designed as an interchange format that can be transformed into formats suitable for run-time usage, or loaded into systems that perform run-time processing using code list information.</p> <p>Klingt gut, hat aber einen Haken. Es existiert keine standardisierte JSON-Repr\u00e4sentation von \"genericode\". </p> <p>Recognizing the custom use of JSON in a tight binding between user-defined processes, the committee sees no purpose served by standardizing a JSON syntax for the genericode vocabulary.</p> <p>Das bedeutet, es gibt keine offizielle Unterst\u00fctzung f\u00fcr JSON als Datenformat und somit auch kein offizielles JSON-Schema.</p> <p>Wer also Code-Listen im XML-Format repr\u00e4sentieren m\u00f6chte, dem sei der OASIS-Standard ans Herz gelegt. Wer aber mit JSON arbeiten m\u00f6chte, der hat mit OpenCodeList eine passende Alternative parat. Nat\u00fcrlich ist OpenCodeList erheblich vom OASIS Code List Representation Format beeinflusst und versucht semantisch weitestgehend kompatibel zu sein.</p>"},{"location":"specification/#warum-json-xml-ist-doch-gut","title":"Warum JSON? XML ist doch gut!","text":"<p>Selbstverst\u00e4ndlich ist XML ein tolles, standardisiertes Format, das kaum W\u00fcnsche offen l\u00e4sst. Der Grund f\u00fcr eine JSON-Darstellung von Code-Listen liegt jedoch in dem ausdr\u00fccklichen Wunsch, JSON zu verwenden:</p> <ul> <li> <p>In der Welt cloud-basierter Dienste hat sich JSON als Payload (zu Deutsch: Nutzdaten) f\u00fcr RESTful-APIs weitestgehend durchgesetzt. Nat\u00fcrlich kann eine solche API auch XML als Payload zur\u00fcckliefern, generiert damit aber eine zus\u00e4tzliche Abh\u00e4ngigkeit, sowohl auf Serverseite (Generieren von XML) als auch auf Clientseite (Konsumieren von XML). Statt mit einem Format (JSON) muss beim Einsatz von Code-Listen mit einem zus\u00e4tzlichen Format (XML) hantiert werden. Das erh\u00f6ht den Aufwand.</p> </li> <li> <p>JSON ist kompakter, da der Syntax weniger wortreich daherkommt. Bei umfangreichen Code-Listen wirkt sich das positiv auf die Performanz aus. Im Allgemeinen ist JSON schneller zu parsen als XML, da es weniger syntaktischen Ballast mit sich bringt und die JSON-Parser in den meisten modernen Programmiersprachen inzwischen stark optimiert sind.</p> </li> </ul>"},{"location":"specification/#definitionen","title":"Definitionen","text":""},{"location":"specification/#opencodelist-dokument","title":"OpenCodeList-Dokument","text":"<p>Ein OpenCodeList-Dokument ist eine in sich geschlossene Ressource, die entweder eine Code-Liste oder eine Code-Listensammlung definiert und beschreibt. Es M\u00dcSSEN mindestens die Eigenschaften <code>opencodelist</code> sowie im gegenseitigen Ausschluss <code>codeList</code> oder <code>codeListSet</code> enthalten sein. Ein OpenCodeList-Dokument verwendet die OpenCodeList-Spezifikation und ist mit ihr konform.</p>"},{"location":"specification/#code-listen","title":"Code-Listen","text":"<p>Eine Code-Liste ist eine klassische relationale Tabelle mit Spalten und Datenzeilen, wobei mindestens eine Spalte als Schl\u00fcssel (Code) dienen sollte. OpenCodeList erlaubt es, generische Code-Listen zu definieren.</p> <p>Ein OpenCodeList-Dokument mit gesetzter Eigenschaft <code>codeList</code> wird auch CodeList-Dokument genannt. </p> <p>Ein OpenCodeList-Dokument mit gesetzter Eigenschaft <code>codeList</code>, aber ohne Daten (also ohne die Untereigenschaft <code>dataSet</code>) wird auch CodeList-Metadokument genannt, weil es nur Metainformationen enth\u00e4lt.</p>"},{"location":"specification/#code-listensammlungen","title":"Code-Listensammlungen","text":"<p>Eine Code-Listensammlung ist eine Liste von Verweisen auf externe Code-Listen oder externe Code-Listensammlung. Mit einer Code-Listensammlung kann Folgendes abgebildet werden:</p> <ul> <li> <p>Zusammenfassen unterschiedlicher Versionen einer Code-Liste in einer Sammlung.</p> </li> <li> <p>Erstellung einer Hierachie von Code-Listensammlungen.</p> </li> <li> <p>Erstellung eines Indexes aller nutzbaren Code-Listen.</p> </li> </ul> <p>Ein OpenCodeList-Dokument mit gesetzter Eigenschaft <code>codeListSet</code> wird auch CodeListSet-Dokument genannt. </p> <p>Ein OpenCodeList-Dokument mit gesetzter Eigenschaft <code>codeListSet</code>, aber ohne Verweise (also ohne die Untereigenschaft <code>referenceSet</code>) wird auch CodeListSet-Metadokument genannt, weil es nur Metainformationen enth\u00e4lt.</p>"},{"location":"specification/#spezifikation","title":"Spezifikation","text":""},{"location":"specification/#versionierung_1","title":"Versionierung","text":"<p>Die OpenCodeList-Spezifikation wird nach dem Schema <code>major.minor.patch</code> versioniert. Der Major-Minor-Teil der Versionsnummer (z. B. <code>0.2</code>) MUSS den Funktionssatz der Spezifikation bezeichnen. Die Patch-Versionen betreffen Fehler in diesem Dokument oder stellen Klarstellungen zu diesem Dokument bereit, nicht zum Funktionsumfang. Werkzeuge, die OpenCodeList in der Version <code>0.2</code> unterst\u00fctzen, M\u00dcSSEN mit allen <code>0.2.*</code> Versionen von OpenCodeList kompatibel sein. Die Patch-Version SOLLTE von den Werkzeugen NICHT ber\u00fccksichtigt werden, so dass zum Beispiel kein Unterschied zwischen <code>0.2.0</code> und <code>0.2.1</code> gemacht wird.</p> <p>Ein OpenCodeList-Dokument enth\u00e4lt stets ein obligatorisches Eigenschaft <code>opencodelist</code>, das die verwendete Version der OpenCodeList-Spezifikation angibt.</p>"},{"location":"specification/#format","title":"Format","text":"<p>Ein OpenCodeList-Dokument, das mit der OpenCodeList-Spezifikation konform ist, ist selbst ein JSON-Objekt, das im JSON-Format dargestellt werden kann.</p> <p>Bei allen Namen von Eigenschaften in der Spezifikation wird zwischen Gro\u00df- und Kleinschreibung unterschieden. Das Schema sieht zwei Arten von Eigenschaften vor: Fest definierte Eigenschaften, die einen deklarierten Namen haben, und freie Eigenschaften, deren Namen aber einem bestimmten Muster (Englisch: pattern) entsprechen M\u00dcSSEN. Zus\u00e4tzliche Eigenschaften M\u00dcSSEN innerhalb des enthaltenen JSON-Objekts eindeutige Namen haben.</p>"},{"location":"specification/#json-schema","title":"JSON Schema","text":"<p>JSON Schema ist eine Spezifikation zur Definition von JSON-Datenstrukturen. Ein JSON-Schema wird selbst deklarativ durch JSON ausgedr\u00fcckt. Das OpenCodeList Document Schema ist ein JSON-Schema f\u00fcr OpenCodeList-Dokumente.</p>"},{"location":"specification/#mehrsprachigkeit_1","title":"Mehrsprachigkeit","text":"<p>OpenCodeList unterst\u00fctzt Mehrsprachigkeit, d.h. Textspalten in einer Code-Liste k\u00f6nnen optional mit einem IETF BCP 47-Sprachtag versehen werden.   </p> <p>Beispiel:</p> <pre><code>\"columns\": [\n  {\n    \"id\": \"col-1\",\n    \"name\": \"Beschreibung\",\n    \"description\": \"Column with German description\",\n    \"type\": \"string\",\n    \"language\": \"de\"\n  },\n  {\n    \"id\": \"col-2\",\n    \"name\": \"Description\",\n    \"description\": \"Column with English description\",\n    \"type\": \"string\",\n    \"language\": \"en\"\n  }\n],\n</code></pre>"},{"location":"specification/#sprachtags","title":"Sprachtags","text":"<p>IETF BCP 47 (Best Current Practice 47) ist ein Dokument, das die Regeln und Verfahren zur Erstellung und Nutzung von Sprachkennzeichnungen definiert. Diese Kennzeichnungen werden verwendet, um die Sprache von Inhalten im Internet zu identifizieren. BCP 47 wird von der Internet Engineering Task Force (IETF) verwaltet und besteht aus zwei RFCs (Request for Comments): RFC 5646 und RFC 4647.</p> <p>Sprachtags sind notwendig, um die richtige Lokalisierung und Internationalisierung von Webinhalten und Software zu gew\u00e4hrleisten. Sie erm\u00f6glichen es Anwendungen und Diensten, den richtigen Sprachinhalt f\u00fcr Benutzer bereitzustellen und die korrekte Darstellung von sprachspezifischen Daten wie Datumsformaten, Zahlen und Textrichtung zu unterst\u00fctzen.</p> <p>Ein BCP 47-Sprachtag besteht aus einer Reihe von Untertags, die durch Bindestriche getrennt sind. Diese Untertags definieren verschiedene Aspekte der Sprache und ihrer Varianten. Die grundlegendsten Komponenten sind:</p> <ul> <li> <p>Prim\u00e4rsprachen-Subtag: Dies ist ein obligatorischer Subtag und besteht aus einem Zwei- oder Drei-Buchstaben-Code, der die Hauptsprache bezeichnet (z.B. <code>en</code> f\u00fcr Englisch, <code>de</code> f\u00fcr Deutsch).</p> </li> <li> <p>Region-Subtag: Ein optionaler Subtag, der ein Land oder eine Region spezifiziert (z.B. <code>US</code> f\u00fcr die Vereinigten Staaten in <code>en-US</code>).</p> </li> <li> <p>Skript-Subtag: Ein optionaler Subtag, der das Schriftsystem angibt (z.B. <code>Latn</code> f\u00fcr das lateinische Alphabet in <code>zh-Latn</code>).</p> </li> <li> <p>Variante-Subtag: Ein optionaler Subtag, der Sprachvarianten oder Dialekte beschreibt (z.B. <code>1901</code> f\u00fcr die traditionelle deutsche Rechtschreibung in <code>de-1901</code>).</p> </li> <li> <p>Extension-Subtag: Erweiterungen zur Angabe zus\u00e4tzlicher Informationen.</p> </li> <li> <p>Privatgebrauch-Subtag: Ein Bereich, der f\u00fcr die private Nutzung reserviert und nicht standardisiert ist.</p> </li> </ul>"},{"location":"specification/#datums-und-zeitangaben","title":"Datums- und Zeitangaben","text":"<p>Die Formatierung der Datums- und Zeitangaben in OpenCodeList sind, wie von JSON Schema vorgegeben, durch RFC 3339, Abschnitt 5.6 spezifiziert.</p> <p>Beispiele:</p> <ul> <li><code>date-time</code> : Datum und Zeit zusammen, z.B. <code>2024-11-13T20:20:39</code> oder <code>2024-11-13T20:20:39+00:00</code>.</li> <li><code>time</code> : Nur Uhrzeit, z.B. <code>20:20:39</code> oder <code>20:20:39+00:00</code>.</li> <li><code>date</code> : Nur Datum, z.B. <code>2024-11-13</code>.</li> </ul>"},{"location":"specification/#uris","title":"URIs","text":"<p>Wird ein Uniform Resource Identifier (URI) verlangt, muss je nach Kontext zwischen zwei JSON-String-Formaten unterscheiden werden:</p> <ul> <li> <p>Das Format <code>uri</code> erwartet, dass der JSON-String ein absoluter URI (Uniform Resource Identifier) ist. Ein absoluter URI enth\u00e4lt alle notwendigen Informationen, um die Ressource unabh\u00e4ngig von ihrem Kontext zu identifizieren. Das bedeutet, dass ein <code>uri</code></p> <ul> <li>mit einem Schemas (wie http, https, etc.) beginnt,</li> <li>einen Hostnamen oder eine IP-Adresse enthalten kann,</li> <li>und optional einen Pfad, eine Abfrage und ein Fragment enthalten kann.</li> </ul> </li> <li> <p>Das Format <code>uri-reference</code> ist flexibler und erlaubt sowohl absolute als auch relative URIs. <code>uri-reference</code> kann also eine vollst\u00e4ndige URI wie oben beschrieben sein, oder es kann ein relativer Verweis sein, der in einem bestimmten Kontext interpretiert werden muss. Ein relativer URI k\u00f6nnte beispielsweise nur einen Pfad oder sogar nur ein Fragment enthalten.</p> </li> </ul> <p>Beispiele:</p> <ul> <li> <p><code>uri</code> : </p> <ul> <li><code>https://example.com/path/to/resource?query=param#fragment</code></li> </ul> </li> <li> <p><code>uri-reference</code> : </p> <ul> <li><code>https://example.com/path/to/resource?query=param#fragment</code></li> <li><code>/path/to/resource</code></li> <li><code>#fragment</code></li> </ul> </li> </ul>"},{"location":"specification/#schema","title":"Schema","text":""},{"location":"specification/#opencodelist-dokument_1","title":"OpenCodeList-Dokument","text":"<p>Ein OpenCodeList-Dokument enth\u00e4lt folgende Eigenschaften:</p> <code>$opencodelist</code> <p>Ein JSON-String mit der Versionsnummer der OpenCodeList-Spezifikation. Diese Eigenschaft ist ERFORDERLICH.</p> <code>$comments</code> <p>Eine Liste von Kommentaren. Es MUSS ein JSON-String-Array sein.</p> <code>codeList</code> <p>Ein <code>codeList</code>-Objekt, das die Spaltendefinitionen und den Dateninhalt einer Code-Liste beinhaltet. </p> <code>codeListSet</code> <p>Ein <code>codeListSet</code>-Objekt, das eine Sammlung von Verweisen auf externe OpenCodeList-Dokumente definiert. </p> <p>Die Eigenschaften <code>codeList</code> und <code>codeListSet</code> schlie\u00dfen sich gegenseitig aus. Eine von beiden Eigenschaften ist ERFORDERLICH. </p> <p>Ist die Eigenschaft <code>codelist</code> gesetzt, gilt:</p> <ul> <li> <p>Ist die Untereigenschaft <code>dataSet</code> ebenfalls gesetzt, handelt es sich um ein CodeList-Dokument. </p> </li> <li> <p>Anderfalls handelt es sich um ein CodeList-Metadokument.</p> </li> </ul> <p>Ist die Eigenschaft <code>codelistSet</code> gesetzt, gilt:</p> <ul> <li> <p>Ist die Untereigenschaft <code>referenceSet</code> ebenfalls gesetzt, handelt es sich um ein CodeListSet-Dokument. </p> </li> <li> <p>Anderfalls handelt es sich um ein CodeListSet-Metadokument.</p> </li> </ul>"},{"location":"specification/#codelist-objekt","title":"codeList-Objekt","text":"<p>Das <code>codeList</code>-Objekt definiert eine komplette Code-Liste samt Daten:</p> <code>annotation</code> <p>Ein <code>annotation</code>-Objekt mit begleitenden Anmerkungen jeglicher Art.</p> <code>identification</code> <p>Ein <code>identification</code>-Objekt mit Metainformationen zur Code-Liste. Diese Eigenschaft ist ERFORDERLICH.</p> <code>columnSet</code> <p>Ein <code>columnSet</code>-Objekt, das die Spalten und eindeutigen Schl\u00fcssel der Code-Liste definiert. Diese Eigenschaft ist ERFORDERLICH.</p> <code>dataSet</code> <p>Ein <code>dataSet</code>-Objekt, das die Datenzeilen der Code-Liste enth\u00e4lt. </p>"},{"location":"specification/#codelistset-objekt","title":"codeListSet-Objekt","text":"<p>Das <code>codeListSet</code>-Objekt definiert eine Sammlung von Verweisen auf externe OpenCodeList-Dokumente:</p> <code>annotation</code> <p>Ein <code>annotation</code>-Objekt mit begleitenden Anmerkungen jeglicher Art.</p> <code>identification</code> <p>Ein <code>identification</code>-Objekt mit Metainformationen zur Verweis-Listensammlung. Diese Eigenschaft ist ERFORDERLICH.</p> <code>referenceSet</code> <p>Eine Liste von Verweisen. Es MUSS ein JSON-Array mit <code>documentRef</code>-Objekten sein. Diese Eigenschaft ist ERFORDERLICH.</p>"},{"location":"specification/#annotation-objekt","title":"annotation-Objekt","text":"<p>Das <code>annotation</code>-Objekt ist ein Platz f\u00fcr Anmerkungen jeglicher Art:</p> <code>descriptions</code> <p>Ein Liste von ausformulierten Anmerkungen. Es MUSS ein JSON-Array mit <code>markup</code>-Objekten sein. </p> <code>appInfo</code> <p>Ein JSON-Objekt mit maschinell verarbeitbaren Metadaten. Der Inhalt ist frei w\u00e4hlbar und muss lediglich dem JSON-Syntax gen\u00fcgen.</p> <p>Eine von beiden Eigenschaften ist ERFORDERLICH. </p>"},{"location":"specification/#markup-objekt","title":"markup-Objekt","text":"<p>Das <code>markup</code>-Objekt ist ein in einer Auszeichnungssprache (z.B. Markdown) formatierter Textblock:</p> <code>language</code> <p>Ein JSON-String mit der Sprache des Textblocks. Dies MUSS ein IETF BCP 47-Sprachtag sein.</p> <code>format</code> <p>Die Auszeichnungssprache des Textblocks. Diese Eigenschaft ist ERFORDERLICH. Es MUSS ein JSON-String mit einem dieser Werte sein:</p> <ul> <li><code>text</code></li> <li><code>markdown</code></li> <li><code>html</code></li> </ul> <code>content</code> <p>Ein JSON-String, der den eigentlichen Inhalt des Textblocks repr\u00e4sentiert. Diese Eigenschaft ist ERFORDERLICH.</p>"},{"location":"specification/#identification-objekt","title":"identification-Objekt","text":"<p>Das <code>identification</code>-Objekt enth\u00e4lt Metainformationen zu einem OpenCodeList-Dokument:</p> <code>language</code> <p>Ein JSON-String mit der Sprache dieses Dokuments. Dies MUSS ein IETF BCP 47-Sprachtag sein.</p> <code>shortName</code> <p>Ein JSON-String mit dem Kurznamen des Dokuments. Diese Eigenschaft ist ERFORDERLICH.</p> <code>longName</code> <p>Ein JSON-String mit dem Langnamen des Dokuments. </p> <code>description</code> <p>Ein JSON-String mit einer kurzen Beschreibung des Dokuments. </p> <code>tags</code> <p>Ein JSON-String-Array mit Tags bzw. Schl\u00fcsselw\u00f6rtern, die den Inhalt des Dokuments bestimmen.</p> <code>version</code> <p>Ein JSON-String mit der Version des Dokuments.</p> <code>changeLog</code> <p>Erlaubt es, die \u00c4nderungen gegen\u00fcber vorherigen Versionen dieses Dokuments zu dokumentieren. Es MUSS ein JSON-Array mit JSON-Strings sein.</p> <code>publishedAt</code> <p>Ein JSON-String im Format <code>date-time</code> mit dem Zeitpunkt der Ver\u00f6ffentlichung dieses Dokuments.</p> <code>publisher</code> <p>Ein <code>publisher</code>-Objekt mit Informationen \u00fcber die Stelle, die f\u00fcr die Ver\u00f6ffentlichung und/oder Pflege des Dokuments zust\u00e4ndig ist.</p> <code>validFrom</code> <p>Ein JSON-String im Format <code>date-time</code>, der den Zeitpunkt definiert, ab dem dieses Dokument g\u00fcltig ist.</p> <code>validTo</code> <p>Ein JSON-String im Format <code>date-time</code>, der den Zeitpunkt definiert, bis zu dem dieses Dokument noch g\u00fcltig ist.</p> <code>canonicalUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert alle Versionen (zusammen) dieses Dokuments eindeutig. </p> <code>canonicalVersionUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert eine bestimmte Version dieses Dokuments. Diese Eigenschaft ist ERFORDERLICH.</p> <code>locationUrls</code> <p>Ein JSON-Array mit JSON-String-Werten im Format <code>uri</code>. Diese URIs sind vorgeschlagene Abruforte f\u00fcr dieses Dokument, im OpenCodeList-Format.</p> <code>alternateLanguageLocations</code> <p>Ein JSON-Array mit <code>localizedUri</code>-Objekten, welches \u00fcbersetzte Versionen dieses OpenCodeList-Dokument und deren vorgeschlagene Speicherorte auflistet.</p> <code>alternateFormatLocations</code> <p>Ein JSON-Array mit <code>mimeTypedUri</code>-Objekten, welches andere Formate als OpenCodeList (z.B. CSV) und deren vorgeschlagene Speicherorte auflistet.</p> <p>Dieses Objekt KANN erweitert werden.</p> <p>Beispiel:</p> <pre><code>\"identification\": {\n  \"language\": \"en\",\n  \"shortName\": \"GermanFederalStateCodes\",\n  \"longName\": \"ISO 3166-2 Codes for Germany\",\n  \"description\": \"ISO 3166-2 Codes for the federal states of Germany\",\n  \"publishedAt\": \"2017-11-24T12:00:00\",\n  \"publisher\": {\n    \"shortName\": \"ISO\",\n    \"longName\": \"International Organization for Standardization\",\n    \"url\": \"https://www.iso.org/\"\n  },\n  \"version\": \"2017-11-23\",\n  \"canonicalUri\": \"urn:iso:std:iso:3166-2:de\",\n  \"canonicalVersionUri\": \"urn:iso:std:iso:3166-2:de:2017-11-23\",\n  \"locationUrls\": [\n    \"https://iso.example.com/germany.federal-state-codes-2017-11-23.json\"\n  ]\n}\n</code></pre>"},{"location":"specification/#publisher-objekt","title":"publisher-Objekt","text":"<p>Das <code>publisher</code>-Objekt definiert den Herausgeber (Beh\u00f6rde, Institution, Personenkreis, etc.), welcher f\u00fcr die Ver\u00f6ffentlichung und/oder Pflege des Dokuments verantwortlich ist:</p> <code>shortName</code> <p>Ein JSON-String mit dem Kurznamen des Herausgebers. Diese Eigenschaft ist ERFORDERLICH.</p> <code>longName</code> <p>Ein JSON-String mit dem Langnamen des Herausgebers. </p> <code>identifier</code> <p>Ein <code>identifier</code>-Objekt mit zus\u00e4tzlichen Informationen (z.B. Eintrag in ein Register) zur Identifikation des Herausgebers.</p> <code>url</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI ist ein Verweis auf zus\u00e4tzliche externe Informationen (z.B. eine Webseite) zum des Herausgeber.</p>"},{"location":"specification/#localizeduri-objekt","title":"localizedUri-Objekt","text":"<p>Das <code>localizedUri</code>-Objekt definiert eine Referenz auf eine lokalisierte Ressource:</p> <code>language</code> <p>Ein JSON-String mit der Sprache der referenzierten Ressource. Dies MUSS ein IETF BCP 47-Sprachtag sein. Diese Eigenschaft ist ERFORDERLICH.</p> <code>url</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI ist der Abrufort der referenzierten Ressource. Diese Eigenschaft ist ERFORDERLICH.</p>"},{"location":"specification/#mimetypeduri-objekt","title":"mimeTypedUri-Objekt","text":"<p>Das <code>mimeTypedUri</code>-Objekt definiert eine Referenz auf eine Ressource in einem vorgegebenen Format:</p> <code>mimeType</code> <p>Ein JSON-String mit einem standardisierten MIME-Typ (Multipurpose Internet Mail Extensions). Diese Eigenschaft ist ERFORDERLICH.</p> <code>url</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI ist der Abrufort der referenzierten Ressource. Diese Eigenschaft ist ERFORDERLICH.</p>"},{"location":"specification/#identifier-objekt","title":"identifier-Objekt","text":"<p>Das <code>identifier</code>-Objekt repr\u00e4sentiert einen allgemeinen Identifikator:</p> <code>value</code> <p>Ein JSON-String mit einem Schl\u00fcssel, Code oder einer ID. Diese Eigenschaft ist ERFORDERLICH.</p> <code>source</code> <p>Ein <code>identifierSource</code>-Objekt mit Quellangaben zu einem Identifikator.</p>"},{"location":"specification/#identifiersource-objekt","title":"identifierSource-Objekt","text":"<p>Das <code>identifierSource</code>-Objekt ist eine Quellangabe f\u00fcr einen allgemeinen Identifikator:</p> <code>shortName</code> <p>Ein JSON-String mit dem Kurznamen der Quelle. Diese Eigenschaft ist ERFORDERLICH.</p> <code>longName</code> <p>Ein JSON-String mit dem Langnamen der Quelle. </p> <code>url</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI ist ein Verweis auf zus\u00e4tzliche externe Informationen (z.B. eine Webseite) zur Quelle.</p>"},{"location":"specification/#columnset-objekt","title":"columnSet-Objekt","text":"<p>Das <code>columnSet</code>-Objekt definiert Spalten und eindeutige Schl\u00fcssel einer Code-Liste:</p> <code>columns</code> <p>Definiert die Spalten der Code-Liste. Es MUSS ein JSON-Array mit <code>column</code>-Objekten sein. Diese Eigenschaft ist ERFORDERLICH.</p> <code>keys</code> <p>Definiert die eindeutigen Schl\u00fcssel der Code-Liste. Es MUSS ein JSON-Array mit <code>key</code>-Objekten sein. Diese Eigenschaft ist ERFORDERLICH.</p> <code>defaultKey</code> <p>Definiert bei mehreren Schl\u00fcsseln den Standardschl\u00fcssel, also jenen Schl\u00fcssel aus <code>keys</code>, der bevorzugt als Code-Quelle genutzt werden soll. Es MUSS ein <code>defaultKey</code>-Objekt sein.</p> <code>foreignKeys</code> <p>Definiert interne Referenzen sowie externe Referenzen zu anderen Code-Listen. Es MUSS ein JSON-Array mit <code>foreignKey</code>-Objekten sein.</p>"},{"location":"specification/#column-objekt","title":"column-Objekt","text":"<p>Das <code>column</code>-Objekt definiert eine Spalte f\u00fcr einer Code-Liste:</p> <code>id</code> <p>Ein JSON-String mit der ID der Spalte. Diese Eigenschaft ist ERFORDERLICH.</p> <code>name</code> <p>Ein JSON-String mit dem dem Namen der Spalte. Diese Eigenschaft ist ERFORDERLICH.</p> <code>description</code> <p>Ein JSON-String mit einer kurzen Beschreibung der Spalte. </p> <code>type</code> <p>Definiert den Datentyp der Spalte. Diese Eigenschaft ist ERFORDERLICH. Es MUSS ein JSON-String mit einem dieser Werte sein:</p> <ul> <li><code>string</code></li> <li><code>enum</code></li> <li><code>enum-set</code></li> <li><code>integer</code></li> <li><code>number</code></li> <li><code>bool</code></li> <li><code>time</code></li> <li><code>date</code></li> <li><code>date-time</code></li> <li><code>object</code></li> </ul> <code>nullable</code> <p>Eine JSON-Boolean, der definiert, ob diese Spalte auch JSON-NULLs enthalten darf.</p> <code>optional</code> <p>Eine JSON-Boolean, der definiert, ob diese Spalte optional ist, sie in einer Datenzeile also auch weggelassen werden kann.</p> <p>Abh\u00e4ngig vom Wert in <code>type</code> sind weitere Eigenschaften verf\u00fcgbar.</p>"},{"location":"specification/#string","title":"string","text":"<p>Ein JSON-String. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minLength</code> : Eine JSON-Nummer im Format <code>integer</code> mit der minimalen zul\u00e4ssigen Anzahl an Zeichen</li> <li><code>maxLength</code> : Eine JSON-Nummer im Format <code>integer</code> mit der maximalen zul\u00e4ssigen Anzahl an Zeichen</li> <li><code>pattern</code> : Eine JSON-String mit einem regul\u00e4ren Ausdruck, der stets zu den Werten in dieser Spalte passen muss. Der verwendete Syntax f\u00fcr regul\u00e4re Ausdr\u00fccke entspricht dem Syntax aus JavaScript (ECMAScript 2024 language specification), so wie er in JSON SChmewa beschrieben und genutzt wird.</li> <li><code>language</code> : Ein JSON-String mit der Sprache f\u00fcr die Inhalte dieser Spalte. Dies MUSS ein IETF BCP 47-Sprachtag sein.</li> </ul>"},{"location":"specification/#enum","title":"enum","text":"<p>Einen JSON-String, der ein Aufz\u00e4hlung repr\u00e4sentiert. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>members</code> : Definiert die m\u00f6glichen Werte der Aufz\u00e4hlung. Es MUSS ein JSON-Array mit <code>enumMember</code>-Objekten sein. Diese Eigenschaft ist ERFORDERLICH.</li> <li><code>language</code> : Ein JSON-String mit der Sprache f\u00fcr die Inhalte dieser Spalte. Dies MUSS ein IETF BCP 47-Sprachtag sein.</li> </ul>"},{"location":"specification/#enum-set","title":"enum-set","text":"<p>Einen JSON-Array, der eine Aufz\u00e4hlungmenge repr\u00e4sentiert. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>members</code> : Definiert die m\u00f6glichen Werte der Aufz\u00e4hlungmenge. Es MUSS ein JSON-Array mit <code>enumMember</code>-Objekten sein. Diese Eigenschaft ist ERFORDERLICH.</li> <li><code>language</code> : Ein JSON-String mit der Sprache f\u00fcr die Inhalte dieser Spalte. Dies MUSS ein IETF BCP 47-Sprachtag sein.</li> </ul>"},{"location":"specification/#integer","title":"integer","text":"<p>Repr\u00e4sentiert eine JSON-Nummer im Format <code>integer</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Eine JSON-Nummer im Format <code>integer</code> mit dem zul\u00e4ssigen Minimalwert.</li> <li><code>maxValue</code> : Eine JSON-Nummer im Format <code>integer</code> mit dem zul\u00e4ssigen Minimalwert.</li> </ul>"},{"location":"specification/#number","title":"number","text":"<p>Repr\u00e4sentiert eine JSON-Nummer im Format <code>number</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Eine JSON-Nummer im Format <code>number</code> mit dem zul\u00e4ssigen Minimalwert.</li> <li><code>exclusiveMinValue</code> : Eine JSON-Nummer im Format <code>number</code>, welche die exklusive Untergrenze definiert.</li> <li><code>maxValue</code> : Eine JSON-Nummer im Format <code>number</code> mit dem zul\u00e4ssigen Minimalwert.</li> <li><code>exclusiveMaxValue</code> : Eine JSON-Nummer im Format <code>number</code>, welche die exklusive Obergrenze definiert.</li> </ul>"},{"location":"specification/#boolean","title":"boolean","text":"<p>Repr\u00e4sentiert eine JSON-Nummer im Format <code>boolean</code>. Es sind keine zus\u00e4tzlichen Schema-Eigenschaften verf\u00fcgbar.</p>"},{"location":"specification/#date","title":"date","text":"<p>Repr\u00e4sentiert ein JSON-String im Format <code>date</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Ein JSON-String im Format <code>date</code> mit dem zul\u00e4ssigen Minimalwert.</li> <li><code>maxValue</code> : Ein JSON-String im Format <code>date</code> mit dem zul\u00e4ssigen Minimalwert.</li> </ul>"},{"location":"specification/#date-time","title":"date-time","text":"<p>Repr\u00e4sentiert ein JSON-String im Format <code>date-time</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Ein JSON-String im Format <code>date-time</code> mit dem zul\u00e4ssigen Minimalwert.</li> <li><code>maxValue</code> : Ein JSON-String im Format <code>date-time</code> mit dem zul\u00e4ssigen Minimalwert.</li> </ul>"},{"location":"specification/#time","title":"time","text":"<p>Repr\u00e4sentiert ein JSON-String im Format <code>time</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Ein JSON-String im Format <code>time</code> mit dem zul\u00e4ssigen Minimalwert.</li> <li><code>maxValue</code> : Ein JSON-String im Format <code>time</code> mit dem zul\u00e4ssigen Minimalwert.</li> </ul>"},{"location":"specification/#object","title":"object","text":"<p>Repr\u00e4sentiert ein eingebettetes JSON-Objekt. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>schema</code> : Entweder ein JSON-String im Format <code>uri</code>, das den Abrufort des JSON-Schemas f\u00fcr diese Spalte definiert, oder ein JSON-Objekt mit einem eingebetteten JSON-Schema.</li> </ul>"},{"location":"specification/#enummember-objekt","title":"enumMember-Objekt","text":"<p>Das <code>enumMember</code>-Objekt definiert einen Wert in einer Aufz\u00e4hlung:</p> <code>value</code> <p>Ein JSON-String mit dem Aufz\u00e4hlungswert. Diese Eigenschaft ist ERFORDERLICH.</p> <code>description</code> <p>Ein JSON-String mit der Beschreibung des Aufz\u00e4hlungswertes.</p>"},{"location":"specification/#key-objekt","title":"key-Objekt","text":"<p>Das <code>key</code>-Objekt definiert einen eindeutigen Schl\u00fcssel f\u00fcr die Code-Liste:</p> <code>id</code> <p>Ein JSON-String mit der eindeutigen ID des Schl\u00fcssels. Diese Eigenschaft ist ERFORDERLICH.</p> <code>name</code> <p>Ein JSON-String mit dem Namen des Schl\u00fcssels.</p> <code>description</code> <p>Ein JSON-String mit einer kurzen Beschreibung des Schl\u00fcssels.</p> <code>columnIds</code> <p>Ein JSON-String-Array mit IDs, die jeweils auf ein <code>column</code>-Objekt verweisen. Diese Eigenschaft ist ERFORDERLICH.</p> <p>Beispiel:   </p> <pre><code>\"keys\": [\n  {\n    \"id\": \"codeKey\",\n    \"name\": \"My primary key\",\n    \"columnIds\": [\n      \"code\"\n    ]\n  }\n]\n</code></pre>"},{"location":"specification/#defaultkey-objekt","title":"defaultKey-Objekt","text":"<p>Das <code>defaultKey</code>-Objekt definiert den Standardschl\u00fcssel f\u00fcr die Code-Liste:</p> <code>keyId</code> <p>Ein JSON-String mit einer ID, die auf ein <code>key</code>-Objekt in dieser Code-Liste verweist. Diese Eigenschaft ist ERFORDERLICH.</p> <p>Beispiel:   </p> <pre><code>\"defaultKey\": {\n  \"keyId\": \"codeKey\"\n}\n</code></pre>"},{"location":"specification/#foreignkey-objekt","title":"foreignKey-Objekt","text":"<p>Das <code>foreignKey</code>-Objekt definiert einen Fremdschl\u00fcssel zur einer externen Code-Liste:</p> <code>id</code> <p>Ein JSON-String mit der eindeutigen ID des Fremdschl\u00fcssels. Diese Eigenschaft ist ERFORDERLICH.</p> <code>name</code> <p>Ein JSON-String mit dem Namen des Fremdschl\u00fcssels.</p> <code>description</code> <p>Ein JSON-String mit einer kurzen Beschreibung des Fremdschl\u00fcssels.</p> <code>columnIds</code> <p>Ein JSON-String-Array mit IDs, die jeweils auf ein <code>column</code>-Objekt verweisen. Diese Eigenschaft ist ERFORDERLICH.</p> <code>keyRef</code> <p>Ein <code>keyRef</code>-Objekt, das auf einen Schl\u00fcssel in einer externe Code-Liste verweist. Diese Eigenschaft ist ERFORDERLICH.</p> <p>Beispiel:   </p> <pre><code>\"foreignKeys\": [\n  {\n    \"id\": \"foreignKey\",\n    \"name\": \"My foreign key\",\n    \"columnIds\": [\n      \"federalState\"\n    ],\n    \"keyRef\": {\n      \"codeListRef\": {\n        \"canonicalUri\": \"urn:iso:std:iso:3166-2:de\",\n        \"canonicalVersionUri\": \"urn:iso:std:iso:3166-2:de:2017-11-23\",\n        \"locationUrls\": [\n          \"https://iso.example.com/germany.federal-state-codes-2017-11-23.json\"\n        ]\n      },\n      \"keyId\": \"codeKey\"\n    }\n  }\n]\n</code></pre>"},{"location":"specification/#keyref-objekt","title":"keyRef-Objekt","text":"<p>Das <code>keyRef</code>-Objekt definiert eine Referenz auf einen Schl\u00fcssel in einer externen Code-Liste:</p> <code>codeListRef</code> <p>Ein <code>codeListRef</code>-Objekt, das auf eine externe Code-Liste verweist. Diese Eigenschaft ist ERFORDERLICH.</p> <code>keyId</code> <p>Ein JSON-String mit einer ID, die auf ein <code>key</code>-Objekt in der unter <code>codeListRef</code> definierten externen Code-Liste verweist. Diese Eigenschaft ist ERFORDERLICH.</p>"},{"location":"specification/#codelistref-objekt","title":"codeListRef-Objekt","text":"<p>Das <code>codeListRef</code>-Objekt definiert einen Verweis auf eine externe CodeList-Dokument:</p> <code>canonicalUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert alle Versionen (zusammen) der referenzierten Code-Liste eindeutig. </p> <code>canonicalVersionUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert eine bestimmte Version der referenzierten Code-Liste. Diese Eigenschaft ist ERFORDERLICH.</p> <code>locationUrls</code> <p>Ein JSON-Array mit JSON-String-Werten im Format <code>uri</code>. Diese URIs sind vorgeschlagene Abruforte f\u00fcr die referenzierte Code-Liste, im OpenCodeList-Format.</p>"},{"location":"specification/#dataset-objekt","title":"dataSet-Objekt","text":"<p>Das <code>dataSet</code>-Objekt enth\u00e4lt die Daten einer Code-Liste:</p> <code>rows</code> <p>Definiert die Datenzeilen der Code-Liste. Es MUSS ein JSON-Array mit <code>row</code>-Objekten sein. Diese Eigenschaft ist ERFORDERLICH.</p>"},{"location":"specification/#row-objekt","title":"row-Objekt","text":"<p>Das <code>row</code>-Objekt definiert eine Datenzeile in einer Code-Liste. Ein <code>row</code>-Objekt ist ein JSON-Objekt, dessen Eigenschaften sich aus den Spaltendefinitionen der <code>column</code>-Objekte ergeben:</p> <ul> <li> <p>Es M\u00dcSSEN mindestens soviele Eigenschaften vorhanden sein wie es <code>column</code>-Objekte mit der Eigenschaft <code>\"optional\": false</code> gibt.</p> </li> <li> <p>Es D\u00dcRFEN h\u00f6chstens soviele Eigenschaften vorhanden sein wie es <code>column</code>-Objekte ingesamt gibt.</p> </li> <li> <p>F\u00fcr jede Eigenschaft gilt:</p> <ul> <li> <p>Der Name enspricht einer ID, die auf ein <code>column</code>-Objekt verweist</p> </li> <li> <p>Der Wert kann ein JSON-Null-Wert, ein JSON-String, ein JSON-Numeric, ein JSON-Objekt oder ein JSON-Array sein, muss aber mit dem Spaltentyp des <code>column</code>-Objekts korrespondieren.</p> </li> </ul> </li> </ul> <p>Beispiel:   </p> <pre><code>\"codeList\": {\n  \"identification\": { ... },\n  \"columnSet\": {\n    \"columns\": [\n      {\n        \"id\": \"code\",\n        \"name\": \"Code\",\n        \"type\": \"string\"\n      },\n      {\n        \"id\": \"name\",\n        \"name\": \"Name\",\n        \"type\": \"string\"\n      },\n      {\n        \"id\": \"population\",\n        \"name\": \"Population\",\n        \"type\": \"intger\"\n      }\n    }\n  },\n  \"dataSet\": {\n    \"rows\": [\n      {\n        \"code\": \"BW\",\n        \"name\": \"Baden-W\u00fcrttemberg\"\n        \"population\": 11280000\n      },\n      {\n        \"code\": \"BY\",\n        \"name\": \"Bavaria\"\n        \"population\": 7450000\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"specification/#documentref-objekt","title":"documentRef-Objekt","text":"<p>Das <code>documentRef</code>-Objekt definiert einen Verweis auf ein externes OpenCodeList-Dokument:</p> <code>type</code> <p>Definiert den Dokumententyp des Verweises. Diese Eigenschaft ist ERFORDERLICH. Es MUSS ein JSON-String mit einem dieser Werte sein:</p> <ul> <li><code>codeListRef</code>: Verweis auf CodeList-Dokument</li> <li><code>codeListSetRef</code>: Verweis auf CodeListSet-Dokument</li> </ul> <code>annotation</code> <p>Ein <code>annotation</code>-Objekt mit benutzerdefinierten Anmerkungen jeglicher Art.</p> <code>canonicalUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert alle Versionen (zusammen) des referenzierten Dokumentes eindeutig. </p> <code>canonicalVersionUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert eine bestimmte Version der referenzierten Dokumentes. Diese Eigenschaft ist ERFORDERLICH.</p> <code>locationUrls</code> <p>Ein JSON-Array mit JSON-String-Werten im Format <code>uri</code>. Diese URIs sind vorgeschlagene Abruforte f\u00fcr das referenzierte Dokument, im OpenCodeList-Format.</p>"},{"location":"specification/#erweiterung-der-spezifikation","title":"Erweiterung der Spezifikation","text":"<p>Die OpenCodeList-Spezifikation kann an bestimmten Stellen um zus\u00e4tzliche Daten erweitert werden.</p> <p>Die Eigenschaften der Erweiterungen sind als freie Eigenschaften implementiert, denen immer ein <code>x-</code> vorangestellt werden MUSS (z.B. <code>x-external-id</code>). Der Wert kann eine Zeichenfolge, eine Zahl, ein boolescher Wert, Null, ein Objekt oder ein Array sein.</p> <p>Die Erweiterungen k\u00f6nnen von den verf\u00fcgbaren Werkzeugen unterst\u00fctzt werden oder auch nicht. Idealerweise k\u00f6nnen diese Werkzeuge erweitert werden, um die gew\u00fcnschte Unterst\u00fctzung hinzuzuf\u00fcgen (z.B. bei Open Source-Projekten).</p> <p>Beispiel:</p> <pre><code>\"identification\": {\n  \"shortName\": \"GermanFederalStateCodes\",\n  \"publisher\": {\n    \"shortName\": \"ISO\",\n    \"longName\": \"International Organization for Standardization\",\n    \"x-contact-name\": \"ISO Central Secretariat\",\n    \"x-contact-address\": \"Chemin de Blandonnet 8, 1214 Geneva, Switzerland\",\n    \"x-contact-email\": \"central@iso.org \"\n  }\n}\n</code></pre>"}]}